@page "/person/add"
@page "/person/edit/{userId:int}"
@using Services
@inject IJSRuntime JSRuntime
@inject IPersonService personService
<PageTitle>@Title</PageTitle>

<h3>@Title</h3>
<a href="/persons" class="btn btn-outline-dark">Show All</a>

<div class="row">
    <div class="">
       <EditForm Model="@person" OnValidSubmit="Save">
           <DataAnnotationsValidator/>

           <div class="w-full">
              <label for="Name">Name</label>
             <InputText class="form-control" @bind-Value="person.Name"/>
             <ValidationMessage For="@(()=>person.Name)"/>
           </div>
            <div class="form-group">
                <label for="Email">Email</label>
                <InputText class="form-control" id="cnicInput" @bind-Value="person.Email" />
                <ValidationMessage For="@(()=>person.Email)" />
            </div>

            <div class="form-group">
                <label for="pnoneNumber">Mobile Number</label>
                <InputText class="form-control" rows="4" @bind-Value="person.phoneNumber" id="phone-mask"/>
                <ValidationMessage For="@(()=>person.phoneNumber)" />
            </div>
            
            <div class="form-group">
                <label for="Email">Permanent Address</label>
                <InputTextArea class="form-control" rows="4" @bind-Value="person.Address" />
                <ValidationMessage For="@(()=>person.Address)" />
            </div>
            

            <div class="my-2">
                @message
            </div>

            <div class="">
                <div class="my-2 w-50 ">
                    <button type="submit" class="btn btn-dark w-25">Save</button>
                    <button type="button" class="btn btn-secondary w-auto" @onclick="SaveAsDraft">Save as draft</button>
                </div>
            </div>

       </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int UserId { get; set; }
    private string message = string.Empty;
    Models.Person person = new();
    private string Title = "Add Person";
    

    private void Save()
    {
        message = "wait...";
        if (personService.AddUpdate(person))
        {
            message = "Sucessfully added";
            person = new();
        }
        else
        {
            message = "Could not saved";
        }
    }

    private void SaveAsDraft()
    {
        message = "wait...";
        person.IsDraft = true;
        if (personService.AddUpdate(person))
        {
            message = "Sucessfully saved as draft";
            person = new();
        }
        else
        {
            message = "Could not saved as draft";
        }
    }



    protected override void OnInitialized()
    {
        if (UserId > 0)
        {
            Title = "Update Person";
            person = personService.FindById(UserId);
        }
        base.OnInitialized();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("masks");
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // Initialize input masking for the CNIC input field
    //         await JSRuntime.InvokeVoidAsync("initializeInputMask", "cnicInput", "99999-9999999-9");
    //     }
    // }

}
